-content_for :trends do
  = render :partial => "discussion_trends", :object => @tag_cloud

- @current_class = 'discussion hentry entry post'

- show_close_request_form = !@discussion.closed && logged_in? && @discussion.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @discussion.closed && logged_in? && @discussion.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @discussion.closed
    - show_close_request_form = (@discussion.close_reason.user_id == current_user.id)
  - @flag = current_user.has_flagged?(@discussion) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@discussion) || OpenRequest.new

- if show_close_request_form
  - @close_request = @discussion.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

- discussion_body = find_and_preserve(shapado_auto_link(markdown(@discussion.body.present? ? @discussion.body : @discussion.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@discussion.tags.dup, @discussion.title)}
  %meta{:name => "description", :content => discussion_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => discussion_url(@discussion) }

- source = discussion_path(@discussion)
= error_messages_for 'answer'

- content_for :main do
  = javascript_include_merged :show
  =render :partial => "toolbox"
  =render :partial => "controls", :object=>@discussion
  #discussion-body-col.commentable.markdown
    %a{:name => @discussion.id}
    #body
      - if @discussion.closed && @discussion.close_reason
        #close_reason
          = t(".close_reason")
          = t(@discussion.close_reason.reason, :scope=>"close_requests.form")
          - if !@discussion.close_reason.comment.empty?
            .comment
              =find_and_preserve(shapado_auto_link(@discussion.close_reason.comment))
      .entry-details
        .entry-title
          = @discussion.title
          - if @discussion.closed
            =" [#{t("closed", :scope => "activerecord.attributes.discussion").upcase}]"

        .entry-authors
          = render :partial => "entry_authors"

        .entry-tags.tag-list
          - @discussion.tags.each do |tag|
            %span.tag
              = link_to h(tag), url_for(:controller => "discussions", :action => "index", :tags => tag), :rel => "tag"
          - if logged_in? && (current_user.can_modify?(@discussion) || current_user.can_retag_others_items_on?(current_group)) #tofix
            %span.retag
              = link_to t('.retag'), retag_discussion_path(@discussion), :id => 'retag'

      .entry-content
        = discussion_body


  .clear
  %a{:name=>"answers"}
  #answers
    .secondary-navigation{:class => @active_subtab.to_s}
      .navlabel
        = t("discussions.show.answers", :count => @answers.total_entries + (@discussion.accepted ? 1 : 0))
      .navcontrols
        .subtabs
          %ul
            %li.newest
              = link_to t("discussions.index.newest"), discussion_path(@discussion, :sort=>"newest", :anchor => "answers"),:class=>"button", :rel => "nofollow"
            %li.votes
              = link_to t("discussions.index.votes"), discussion_path(@discussion, :sort=>"votes", :anchor => "answers"),:class=>"button", :rel => "nofollow"
            %li.oldest
              = link_to t("discussions.index.oldest"), discussion_path(@discussion, :sort=>"oldest", :anchor => "answers"),:class=>"button", :rel => "nofollow"
            %li.spin
              = link_to "&#9733;", "#",:class=>"button"
    .clear

    .block
      - if @discussion.accepted
        -solution = @discussion.answer
        =render :partial=> "answer", :locals=> {:discussion => @discussion, :answer => solution} unless solution.nil?
      .hentry
        -@answers.each do |answer|
          =render :partial=> "answer", :locals=> {:discussion => @discussion, :answer => answer}
      =will_paginate(@answers)

  -unless @discussion.closed
    %a{:name=>"to_answer"}
    -form_for @answer, :url => discussion_answers_path(@discussion.id), :html => {:class => "form mainAnswerForm"} do |f|
      = render :partial => "answers/form", :locals => {:f => f, :markdown => true, :mode => "discussion"}
      .group.navform
        .controls.right{:style => "width: 50%"}
          .left{:style => "width: 49.5%"}
            = f.label :wiki, "Wiki", :class => "radio"
            = f.check_box :wiki, :class => "checkbox"
          .left{:style => "width: 49.5%"}
            = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
            = f.check_box :anonymous, :class => "checkbox"
        = submit_tag t('answers.form.submit'), :class => "button"
      .clear

-content_for :sidebar do
  #sidebar
    .block
      %h3
        = "Started by"
      .content
        =render :partial => "member_panel"
    .block
      %h3
        = "Participants"
      .content
        = "Content"
    .block
      %h3
        = "Sidebar"
      .content
        = "Content"

    - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
      -unless @discussion.flags.count == 0
        .block
          %h3
            = t(:flags, :scope => "activerecord.models")
          .content
            = render :partial => "flags/list", :locals => {:flaggeable => @discussion}

      -unless @discussion.close_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "close_requests.model")
          .content
            = render :partial => "close_requests/list", :locals => {:discussion => @discussion}

      -unless @discussion.open_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "open_requests.model")
          .content
            = render :partial => "open_requests/list", :locals => {:discussion => @discussion}

    .block
      %h3
        = t('.tags', :default => [:"layouts.application.tags", :"activerecord.attributes.user.tags", "tags"])
      = render :partial => "shared/tag_list", :object => @tag_cloud, :locals => { :extra_params => {:controller => "discussions", :action => "index"} }


    - if @discussion.badges.size > 0
      .block
        %h3
          = t('badges', :scope => "activerecord.models")
        .content
          %ul.list
            -@discussion.badges.each do |badge|
              %li
                = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}

      .block.stats
        - if @discussion.group_id != current_group.id
          = t(".asked_on")
          &= @discussion.group.name

        .entry
          .text.asked
            = t('activerecord.attributes.discussion.created_at')
            .data
              = t("time.ago", :time => time_ago_in_words(@discussion.created_at))
        .entry
          .text.viewed
            = t('.viewed')
          .data
            = t('number.x_time', :count => number_with_delimiter(@discussion.views_count))
        .entry
          .text.last_activity
            = t(".last_activity")
          .data.updated{:title => @discussion.activity_at, :class => "relativetime"}
            = t("time.ago", :time => time_ago_in_words(@discussion.activity_at))

      -related_discussions = discussion.related_discussions(@discussion, :language => find_languages)
      - if !related_discussions.empty?
        .block
          %h3
            =t(".related_discussions")
          .content
            %ul.list
              -related_discussions.each do |rq|
                %li
                  = link_to h(rq.title), discussion_path(rq), :title => truncate(strip_tags(rq.body), :length => 200)
