= t(:mode)
= f.error_messages
= error_messages_for(:user)

.group
  = f.label :title, "#{t(:mode, :scope => "activerecord.attributes.item")}*", :class => "label"
  -Item::MODES.each do |mode|
    = f.radio_button :mode, mode, :class => "radio_button"
    = t(mode)
  .description
    = t(".mode_promt")


.group
  = f.label :title, "#{t(:title, :scope => "activerecord.attributes.item")}*", :class => "label"
  = f.text_field :title, :class => "text_field"
  .description
    = current_group.item_prompt

.group
  = f.label :tags, "#{t(:tags, :scope => "activerecord.attributes.item")}", :class => "label"
  = f.text_field :tags, :value => @item.tags.join(", "), :class => "text_field autocomplete_for_tags"
  .description
    = t(".tags_tip")

.group
  %label.label#rqlabel
    =t(".related_items", :default => :"items.show.related_items" )
  %ul.items#related_items

.group
  = f.label :body, t(:body, :scope => "activerecord.attributes.item"), :class => "label"
  -if current_group.wysiwyg_editor
    = f.text_area :body, :class => "text_area", :id => "wysiwyg_editor", :value => markdown(@item.body)
  -else
    = f.text_area :body, :class => "text_area", :id => "markdown_editor"

    #markdown_preview.markdown
      =markdown(@item.body)

-if current_group.language.nil? && AppConfig.enable_i18n
  .group
    = f.label :language, t(:language, :scope => "activerecord.attributes.item"), :class => "label"
    = language_select(f, @item)
    .description
      = t(".language_tip")
-else
  = f.hidden_field :language, :value => (current_group.language || AppConfig.default_language)

-if current_group.has_adult_content
  .group
    = f.check_box :adult_content, :class => "checkbox"
    = f.label :adult_content, t(".adult_content"), :class => "radio"

-if !@item.new?
  .group
    = f.label :version_message, t("wiki.model.attributes.message"), :class => "label"
    = f.text_field :version_message, :class => "text_field"
-elsif !logged_in?
  = render :partial => "users/anonymous_form"
