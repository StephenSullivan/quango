- show_close_request_form = !@item.closed && logged_in? && @item.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @item.closed && logged_in? && @item.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @item.closed
    - show_close_request_form = (@item.close_reason.user_id == current_user.id)
  - @flag = current_user.has_flagged?(@item) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@item) || OpenRequest.new

- if show_close_request_form
  - @close_request = @item.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

- item_body = find_and_preserve(shapado_auto_link(markdown(@item.body.present? ? @item.body : @item.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@item.tags.dup, @item.title)}
  %meta{:name => "description", :content => item_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => item_url(@item.doctype, @item) }

- source = item_path(@item.doctype_id, @item)
= error_messages_for 'answer'

-content_for :section_head do
  #section-listing{:class => @active_section}
    = render :partial => "items/section_head_summary", :locals => {:section => @active_section, :default_state => "hidden"}

- content_for :main do
  #main-index
    .content
      .inner
        = javascript_include_merged :show
        =render :partial => "toolbox"
        =render :partial => "controls", :object=>@item
  
        -if @item.mode == "video"
          #video-box
            = render :partial => "video_player", :object=>@item

        #item-body-col.commentable.markdown
          %a{:name => @item.id}
          #body
            - if @item.closed && @item.close_reason
              #close_reason
                = t(".close_reason")
                = t(@item.close_reason.reason, :scope=>"close_requests.form")
                - if !@item.close_reason.comment.empty?
                  .comment
                    =find_and_preserve(shapado_auto_link(@item.close_reason.comment))
            .entry-details
              .small
                %small
                  -#= "<br/>Item id:"
                  = @item.id 
                  -#= "<br/>Item section:"
                  -#= @item.section
                  -#= "<br/>Active doctype:"
                  -#= @active_doctype.id
                  -#= "<br/>Item section id:"
                  -#= @item.section_id



              .entry-title
                = @item.title
                - if @item.closed
                  =" [#{t("closed", :scope => "activerecord.attributes.item").upcase}]"

              .entry-authors
                = render :partial => "entry_authors"

              .entry-tags.tag-list
                - @item.tags.each do |tag|
                  %span.tag
                    = link_to h(tag), url_for(:controller => "item", :action => "index", :tags => tag), :rel => "tag"
                - if logged_in? && (current_user.can_modify?(@item) || current_user.can_retag_others_items_on?(current_group)) #tofix
                  %span.retag
                    = link_to t('.retag'), retag_item_path(@item.doctype, @item), :id => 'retag'

            .entry-content
              = item_body


        .clear

  


        %a{:name=>"answers"}
        #answers
          .secondary-navigation{:class => @active_subtab.to_s}
            %h3
              = h("What do you think?")
          .clear

          -unless @item.closed
            %a{:name=>"to_answer"}
            -form_for @answer, :url => item_answers_path(@item.doctype_id, @item.id), :html => {:class => "form mainAnswerForm"} do |f|
              = render :partial => "answers/form", :locals => {:f => f, :markdown => true, :mode => "item"}
              -if logged_in?
                .group.navform
                  .controls.right{:style => "width: 50%"}
                    .left{:style => "width: 49.5%"}
                      = f.label :wiki, "OpenEdit", :class => "radio"
                      = f.check_box :wiki, :class => "checkbox"
                    .left{:style => "width: 49.5%"}
                      = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
                      = f.check_box :anonymous, :class => "checkbox"
                  = submit_tag t('answers.form.submit'), :class => "button"
              .clear

          .secondary-navigation{:class => @active_subtab.to_s}
            %h3
              = h("What others think")
              = t(@answers.total_entries + (@item.accepted ? 1 : 0))
            .navcontrols
              %ul
                %li.newest
                  = link_to t("items.index.newest"), item_path(@item.doctype_id, @item, :sort=>"newest", :anchor => "answers"),:class=>"standard-button", :rel => "nofollow"
                %li.votes
                  = link_to t("items.index.votes"), item_path(@item.doctype_id, @item, :sort=>"votes", :anchor => "answers"),:class=>"standard-button", :rel => "nofollow"
                %li.oldest
                  = link_to t("items.index.oldest"), item_path(@item.doctype_id, @item, :sort=>"oldest", :anchor => "answers"),:class=>"standard-button", :rel => "nofollow"
                %li.spin
                  = link_to "&#9733;", "#",:class=>"standard-button"
          .clear

          .block
            - if @item.accepted
              -solution = @item.answer
              =render :partial=> "answer", :locals=> {:item => @item, :answer => solution} unless solution.nil?
            .hentry
              -@answers.each do |answer|
                =render :partial=> "answer", :locals=> {:item => @item, :answer => answer}
            =will_paginate(@answers)



-content_for :sidebar_inner do
  #sidebar-inner
    = render :partial => "default_image", :locals => {:item => @item}
    = render :partial => "author"
    = render :partial => "images", :locals => {:item => @item}

    -if logged_in? && current_group.has_bunnies?
      -if current_user.owner_of?(current_group)
        = render :partial => "bunnies", :locals => {:item => @item}

    -related_items = Item.related_items(@item, :language => find_languages)
    - if !related_items.empty?
      .block
        %h3
          =t(".related_items")
        .content
          %ul.list
            -related_items.each do |rq|
              %li
                = link_to h(rq.title), items_path(rq.doctype_id, rq), :title => truncate(strip_tags(rq.body), :length => 200)


-content_for :sidebar do
  #sidebar
    = render :partial => "participants", :locals=> {:item => @item}
    = render :partial => "shared/current_tags"
    = render :partial => "shared/tag_list", :object => @tag_cloud

    - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
      -unless @item.flags.count == 0
        .block
          %h3
            = t(:flags, :scope => "activerecord.models")
          .content
            = render :partial => "flags/list", :locals => {:flaggeable => @item}

      -unless @item.close_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "close_requests.model")
          .content
            = render :partial => "close_requests/list", :locals => {:item => @item}

      -unless @item.open_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "open_requests.model")
          .content
            = render :partial => "open_requests/list", :locals => {:item => @item}

    - if @item.badges.size > 0
      .block
        %h3
          = t('badges', :scope => "activerecord.models")
        .content
          %ul.list
            -@item.badges.each do |badge|
              %li
                = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}






