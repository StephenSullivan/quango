- show_close_request_form = !@item.closed && logged_in? && @item.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @item.closed && logged_in? && @item.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @item.closed
    -# show_close_request_form = (@item.close_reason.user == current_user.id)
    = "closed"
  - @flag = current_user.has_flagged?(@item) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@item) || OpenRequest.new

- if show_close_request_form
  - @close_request = @item.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

- item_body = find_and_preserve(shapado_auto_link(markdown(@item.body.present? ? @item.body : @item.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@item.tags.dup, @item.title)}
  %meta{:name => "description", :content => item_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => item_url(@doctype, @item) }

- source = item_path(@doctype, @item)
= error_messages_for 'answer'

-content_for :summary_headerX do
  #section-listing{:class => @active_section}
    = render :partial => "items/summary_header", :locals => {:doctype => @doctype, :section => @doctype,  :list_mode => "standard"}
 
- content_for :main do
  = javascript_include_merged :show

  #main-index


    .content
      .inner
        .toolbox
          = render :partial => "toolbox"
        -if logged_in?
          -if current_user.owner_of?(current_group) | current_user.mod_of?(current_group)
            %div
              = render :partial => "controls", :object=>@item

        -if @doctype.has_video?

          #video-box
            %div
              = @item.title
            = render :partial => "video_player", :object=>@item

        #item-body-col.commentable.markdown
          %a{:name => @item.id}
          #body
            - if @item.closed && @item.close_reason
              #close_reason
                = t(".close_reason")
                = t(@item.close_reason.reason, :scope=>"close_requests.form")
                - if !@item.close_reason.comment.empty?
                  .comment
                    =find_and_preserve(shapado_auto_link(@item.close_reason.comment))
            -#.entry-publisher

            .entry-details
              .entry-title
                = @item.title
                - if @item.closed
                  =" [#{t("closed", :scope => "activerecord.attributes.item").upcase}]"

              .entry-authors{:style => "border-bottom:1px solid gainsboro;"}
                = render :partial => "entry_authors"

              .tag-list
                - @item.tags.each do |tag|
                  %span.tag
                    = link_to h(tag), url_for(:controller => "item", :action => "index", :tags => tag), :rel => "tag"
                - if logged_in? && (current_user.can_modify?(@item) || current_user.can_retag_others_items_on?(current_group)) #tofix
                  %span.retag
                    = link_to t('.retag'), retag_item_path(@doctype, @item), :id => 'retag',:style => "border:0; background:white", :class => "link"

            .entry-content
              = item_body


        .clear




      %a{:name=>"answers"}
      #answers
        .clear

        -unless @item.closed
          %a{:name=>"to_answer"}
          -form_for @answer, :url => item_answers_path(@doctype, @item), :html => {:class => "form mainAnswerForm"} do |f|
            = render :partial => "answers/form", :locals => {:f => f, :markdown => true, :mode => "item"}
          .clear


        .answers

          .entry-details
            .entry-title
              = h("What others think")
          .secondary-navigation
            .navcontrols
              %ul
                %li
                  = "Sort by: "
                %li.filter
                  = link_to "Fresh", item_path(@doctype, @item, :sort=>"fresh", :anchor => "answers"),:rel => "nofollow", :class => "standard-button"
                %li
                  = link_to "Hot", item_path(@doctype, @item, :sort=>"hot", :anchor => "answers"),:rel => "nofollow", :class => "standard-button"
                %li
                  = link_to "Historical", item_path(@doctype, @item, :sort=>"sweaty", :anchor => "answers"),:rel => "nofollow", :class => "standard-button"

        .clear

        .block
          - if @item.accepted
            -solution = @item.answer
            =render :partial=> "answer", :locals=> {:item => @item, :answer => solution} unless solution.nil?
          .hentry
            -@answers.each do |answer|
              =render :partial=> "answer", :locals=> {:item => @item, :answer => answer}
          =will_paginate(@answers)



-content_for :sidebar_inner do
  #sidebar-inner{:style=>"border:0"}



    -if @doctype.has_video?
      = render :partial => "video_info", :locals => {:item => @item}


    -#= render :partial => "author"
    = render :partial => "default_image", :locals => {:item => @item}
    = render :partial => "images", :locals => {:item => @item}
    = render :partial => "shared/community_sponsor",  :locals => {:width => "wide"}
    -if current_group.has_medium_rectangle
      .label
        = "Advertisment"
      .medium-rectangle{:style=>"width:300px;height:250px; float:left; background-color:pink; border-bottom:1px solid white"}
        = current_group.medium_rectangle_content
      .clear
    = render :partial => "shared/sponsored_links",  :locals => {:width => "wide"}

    -related_items = Item.related_items(@item, :language => find_languages)
    - if related_items
      .block{:style=>"display:none;"}
        %h3
          =t(".related_items")
        .content
          -#%ul.list
            -#-related_items.each do |rq|
              -#%li
                -#= link_to h(rq.title), items_path(rq.doctype, rq.slug.to_s), :title => truncate(strip_tags(rq.body), :length => 200)

    -if !current_group.isolate
      -#= render :partial => "related_communities"

    -if logged_in? && current_group.has_bunnies?
      -if current_user.owner_of?(current_group)
        = render :partial => "bunnies", :locals => {:item => @item}




-content_for :sidebar do
  #sidebar{:style=>"float:left;border-right:1px solid white"}
    = render :partial => "author", :locals => {:width => "narrow"}
    = render :partial => "participants", :locals=> {:item => @item}

    = render :partial => "shared/sidebar_actions",  :locals => {:width => "narrow"}

    = render :partial => "shared/current_tags"
    = render :partial => "shared/tag_list", :object => @tag_cloud
    = render :partial => "shared/community_sponsor", :locals => {:width => "narrow"}
    -#= render :partial => "related_communities"


    - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
      -unless @item.flags.count == 0
        .block
          %h3
            = t(:flags, :scope => "activerecord.models")
          .content
            = render :partial => "flags/list", :locals => {:flaggeable => @item}

      -unless @item.close_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "close_requests.model")
          .content
            = render :partial => "close_requests/list", :locals => {:item => @item}

      -unless @item.open_requests.size == 0
        .block
          %h3
            = t(:prural_name, :scope => "open_requests.model")
          .content
            = render :partial => "open_requests/list", :locals => {:item => @item}

    - if @item.badges.size > 0
      .block
        %h3
          = t('badges', :scope => "activerecord.models")
        .content
          %ul.list
            -@item.badges.each do |badge|
              %li
                = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}






