-link = @question.bookmark

.group
  = f.label "Mode: ", :class => "label"
  = f.text_field :mode, :class => "text_field", :value => "Bookmark", :readonly => "readonly"

.group
  = f.label :bookmark, "#{t(:bookmark, :scope => "activerecord.attributes.bookmark")}", :class => "label"
  = f.text_field :bookmark, :class => "text_field", :value => link

-mytitle = GetMetadata.new(link)
-#get = GetEverything.new(link)
-getkeywords = URLGetRankedKeywords.new(link)
-getconcepts = URLGetRankedConcepts.new(link)
-getentities = URLGetRankedEntities.new(link)
-getentitiess = URLGetNamedEntities.new(link)
-gettext = URLGetText.new(link)


.group
  = f.label :title, "#{t(:title, :scope => "activerecord.attributes.bookmark")}", :class => "label"
  = f.text_field :title, :class => "text_field", :value => mytitle.metatitle.to_s
  .description
    = "Title: "
    - if mytitle.metatitle.to_s == "Please type your bookmark title"
      = "[!] Cannot automatically determine"
    = h(mytitle.metatitle.to_s)

.group
  = f.label :body, t(:body, :scope => "activerecord.attributes.bookmark"), :class => "label"
  -if current_group.wysiwyg_editor
    = f.text_area :body, :class => "text_area", :id => "wysiwyg_editor", :value => markdown(mytitle.metadescription.to_s)
  -else
    = f.text_area :body, :class => "text_area", :id => "markdown_editor", :value => h(mytitle.metadescription.to_s)


.group
  = f.label :tags, "#{t(:tags, :scope => "activerecord.attributes.bookmark")}", :class => "label"
  = f.text_field :tags, :value => mytitle.metakeywords.to_s, :class => "text_field autocomplete_for_tags"
  .description
    = t(".tags_tip")

.group
  = f.label :locations, "#{t(:locations, :scope => "activerecord.attributes.bookmark")}", :class => "label"
  = f.text_field :locations, :value => getentities.locations.to_s, :class => "text_field autocomplete_for_locations"
  .description
    = t(".locations_tip")

.group
  = f.label :persons, "#{t(:persons, :scope => "activerecord.attributes.bookmark")}", :class => "label"
  = f.text_field :persons, :value => getentities.persons.to_s, :class => "text_field autocomplete_for_persons"
  .description
    = t(".persons_tip")



.admin{:style => 'font-size:small;border:1px solid green'}
  .meta{:style => 'float:left;'}
    = "Meta Keywords"
    -string = mytitle.metakeywords.to_s
    = comma_to_list(string)
  .meta{:style => 'float:right;'}
    = "Alchemy Keywords" 
    = link_to "xml", "view-source:" << getkeywords.showlink, :target => "_blank"
    -string = getkeywords.extractedkeywords.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "Alchemy Concepts" 
    = link_to "xml", "view-source:" << getconcepts.showlink, :target => "_blank"
    -string = getconcepts.extractedconcepts.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "Alchemy Entities" 
    = link_to "xml", "view-source:" << getentitiess.showlink, :target => "_blank"
    -string = getentitiess.namedentities.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "Combined and deduped" 
    =# link_to "xml", "view-source:" << getkeywords.showlink, :target => "_blank"
    -#string = combining_strings(mytitle.metakeywords,getkeywords.extractedkeywords).to_s
    =# comma_to_list(string)

  .clear

.admin{:style => 'font-size:0.7em;border:1px solid red'}

  .meta{:style => 'float:right;'}
    = "Alchemy Entities" 
    = link_to "xml", "view-source:" << getentities.showlink, :target => "_blank"
    -string = getentities.entities.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "<b>Terminologies:</b>" 
    -string = getentities.terminologies.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "<b>Persons:</b>" 
    -string = getentities.persons.to_s
    = comma_to_list(string)

  .meta{:style => 'float:right;'}
    = "<b>Organisations:</b>" 
    -string = getentities.organisations.to_s
    = comma_to_list(string)

  .meta{:style => 'float:left;'}
    = "<b>Locations:</b>" 
    -string = getentities.locations.to_s
    = comma_to_list(string)
  .clear


%br
.clear
%hr
  %small
    =# gettext.extractedtext.to_s

%hr
-if current_group.language.nil? && AppConfig.enable_i18n
  .group
    = f.label :language, t(:language, :scope => "activerecord.attributes.question"), :class => "label"
    = language_select(f, @question)
    .description
      = t(".language_tip")
-else
  = f.hidden_field :language, :value => (current_group.language || AppConfig.default_language)

-if current_group.has_adult_content
  .group
    = f.check_box :adult_content, :class => "checkbox"
    = f.label :adult_content, t(".adult_content"), :class => "radio"

-if !@question.new?
  .group
    = f.label :version_message, t("wiki.model.attributes.message"), :class => "label"
    = f.text_field :version_message, :class => "text_field"
-elsif !logged_in?
  = render :partial => "users/anonymous_form"

%hr

=# f.submit t('scaffold.create')
=# t("global.or")
=# link_to t('scaffold.cancel'), questions_path, :class => "button cancel"





%hr 
  = h(@question)
